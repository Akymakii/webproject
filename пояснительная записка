Пояснительная записка к проекту "Каталог товаров"

1. Общие сведения о проекте

Настоящий проект представляет собой веб-приложение "Интернет-магазин", разработанное с использованием фреймворка Flask (Python). Приложение предназначено для организации онлайн-продажи товаров, позволяя пользователям просматривать каталог, добавлять товары в корзину, оформлять заказы и управлять личным профилем.

2. Цели и задачи проекта

•  Цель: Создание функционального и удобного в использовании веб-приложения для электронной коммерции.
•  Задачи:
  •  Реализация каталога товаров с возможностью поиска и фильтрации.
  •  Обеспечение авторизации и аутентификации пользователей.
  •  Реализация корзины и процесса оформления заказа.
  •  Предоставление пользователям возможности управления личным профилем (просмотр истории заказов, изменение личных данных).
  •  Обеспечение административной панели для управления товарами и категориями (в данной версии не реализовано, но предусмотрена возможность расширения).
  •  Обеспечение возможности добавления товаров в корзину и оформление заказов.

3. Архитектура и основные компоненты

•  Flask: Микрофреймворк для создания веб-приложений на языке Python. Обеспечивает маршрутизацию запросов, обработку шаблонов и интеграцию с другими библиотеками.
•  Jinja2: Движок шаблонов, используемый Flask для генерации HTML-страниц. Позволяет внедрять динамические данные в шаблоны.
•  Flask-SQLAlchemy: Расширение Flask для работы с базами данных SQLAlchemy. Обеспечивает удобный интерфейс для определения моделей данных, выполнения запросов и управления транзакциями.
•  SQLite: Локальная база данных, используемая для хранения информации о пользователях, товарах, категориях и заказах. (В дальнейшем может быть заменена на более масштабируемую СУБД, например, PostgreSQL или MySQL).
•  Flask-Login: Расширение Flask для управления аутентификацией пользователей.
•  Werkzeug: Библиотека, предоставляющая инструменты для разработки WSGI-совместимых веб-приложений (используется внутри Flask).
•  Bootstrap: CSS-фреймворк для создания адаптивного и привлекательного пользовательского интерфейса.

4. Особенности реализации

•  Модели данных: Определены модели для пользователей (User), категорий (Category), товаров (Product), заказов (Order) и элементов заказа (OrderItem).
•  Маршруты: Различные маршруты определены для обработки запросов пользователей (например, /, /login, /register, /products/add, /cart, /search).
•  Шаблоны: Используются шаблоны Jinja2 для динамической генерации HTML-страниц.
•  Безопасность: Для работы flash сообщений используется SECRET_KEY.
•  Загрузка изображений: Реализована загрузка изображений товаров с использованием библиотеки PIL.
•  Поиск товаров: Реализована возможность поиска товаров по названию и описанию с использованием запросов SQLAlchemy.

5. Функциональность

•  Регистрация и авторизация пользователей:
  •  Регистрация новых пользователей с проверкой уникальности имени пользователя и email.
  •  Авторизация существующих пользователей с проверкой пароля.
  •  Выход из системы.
•  Управление профилем:
  •  Просмотр личной информации пользователя.
•  Каталог товаров:
  •  Просмотр списка товаров.
  •  Просмотр информации о конкретном товаре.
  •  Поиск товаров по названию и описанию.
•  Управление товарами (для авторизованных пользователей):
  •  Добавление новых товаров с указанием названия, описания, цены, количества на складе, категории и изображения.
  •  Редактирование информации о существующих товарах.
  •  Удаление товаров.
•  Управление категориями (для авторизованных пользователей):
  •  Добавление новых категорий.
•  Корзина и заказы:
  •  Добавление товаров в корзину (с указанием количества).
  •  Просмотр содержимого корзины.
  •  Удаление товаров из корзины.
  •  Оформление заказа (подтверждение заказа и изменение статуса на "processing").
  •  Просмотр истории заказов пользователя.

6. Используемые библиотеки и технологии

•  Python 3.x
•  Flask
•  Flask-SQLAlchemy
•  Flask-Login
•  Werkzeug
•  Bootstrap
•  Pillow (PIL)
•  SQLAlchemy

7. Дальнейшее развитие проекта

•  Реализация полноценной административной панели для управления товарами, категориями, пользователями и заказами.
•  Интеграция платежных систем для онлайн-оплаты заказов.
•  Реализация системы отзывов и оценок товаров.
•  Оптимизация производительности приложения.
•  Добавление функциональности фильтрации товаров по различным параметрам (цена, категория, производитель и т.д.).

8. Заключение

Проект представляет собой функциональное веб-приложение, демонстрирующее возможности Flask и других современных веб-технологий. Приложение может быть использовано в качестве основы для создания полноценной платформы электронной коммерции.
